31_1 --> 
Recap of basic ES6


31_2 --> 
i) Here we saw some Nested object or object element of an Array and How we access them .

ii) Optional Chaining 

// ? by using this qustion mark we want to tell that if stree property has a value then will go to the next otherwise undefined . and It is called optional chaining

console.log(user.address['street']?.second);
console.log(user2.address['street']?.second); 


30_3 -->

এখানে যেই array এর উপর map() function টা use করা হবে সেই array  এর প্রত্যেকটা element এর উপর map এ যেই call back function টা call করা হবে তার operation গুলা array এর প্রত্যেকটা উপাদানের উপর চালানো হবে এবং প্রত্যেকটা element এর result hold করে রাখা হবে একটা implicit array এর মধ্যে । তারপর সবশেষে সেই resultant array টা return করে দেওয়া হবে।

ex:
const numbers = [4, 5, 2, 8, 10];
i)const double2 = n => n * 2;
ii)const output2 = numbers.map(double2);
iii)const output3 = numbers.map(n => n * 2);
const friends = ['Tom', 'John', 'Micheal', 'Oliver'];
iv)const lengths = friends.map(friend => friend.length);
v)const firstLetter = friends.map(friend => friend[0]);


30_4 -->

i)forEach works like map ..but it returns nothing
ii) // filter selects elements based on a condition and returns an array with the elements that fulfilled the condition.

const selected = players.filter(p => p % 2 === 1);
console.log(selected);

filter will return an empty array [] if there is no element based on the condition

iii) find()  will return an only element if it finds based on the condition .. if it finds multiple elements based on the condition it will return only the first element . if it doesnt find any element then it will return undefined.


31_5 -->
reduce() method 
const numbers = [4, 5, 7, 1, 2, 66];
const total = numbers.reduce((previous, current) => previous + current , 0);
console.log(total);

31_6 -->

Basic Class

31_7 -->

Inheritance

and prototype 
__proto__:Object

prototypal Inheritance
Object prototype:
i) hasOwnProperty()
ii) isprotoTypeOf()
iii) constructor()
iv) toString()


31_8 -->
Class and Dot Notation and Bracket Notation ( Slightly Important)
const person = {
    name: 'kodom ali', 
    job: 'badam khai',
    3:'third',
    'add-dress': 'kochu khet'
}
const prop = 'job'
console.log(person.job)
console.log(person['job'])
console.log(person[prop])
console.log(person['3'])
confirm.log(person["add-dress"])


Passing_Function.js (Important)
pass a function as an argument 
3 ways :
1) Passing a Function as an Argument
2) Passing Anonymous Function
3) Passing an Arrow Function


31_9 -->
এইগুলা শিখার জন্য --> Chrome dev toop console api লিখে সার্চ দিতে হবে
Chrome devtool Console tab
const num = 555;
num * num
Math.sqrt($_); // it will sqrt the num value.console এ কাজ করবে শুধু 
$('#account-balance') . id টা দিয়ে দিবে
--> settings এ গিয়ে  preserve log select
--> clear()
--> ctrl + l
--> monitor(function name) function কখন call হবে সেইটা বলে দিবে

--> unmonitor(function name)
--> document.body.contentEditable = true;
এইটা যেকোনো website এর টেক্সট গুলা কে এডিট করার জন্য allow করে।

-->console.time('loop')
for(let i = 0; i < 1000000000; i++)
{
    2*2+2*88888;
}
console.timeEnd('loop')
performance measure করার জন্য কতো সময় লাগছে তা দেখার জন্য ব্যাবহার করা হয়

--> const friends = [{a: 2, b: 3}, {a: 2, b: 3, d: 5}, {a: 2, b: 3}, {a: 2, b: 3, d: 5}]
console.table(friends);


31_10 -->
types of error:
i) Syntax error ii) Type Error iii) Reference Error