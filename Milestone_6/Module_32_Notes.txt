32_1 -->

Javascript is a Dynamic type language

Primitive Type: যেই variable গুলা একটিমাত্র value রাখতে পারে সেটি হছে Primitive Type .
const a = 5;
const b = 'Samsu kopai na ekhon ar';
const d = true;


Non-Primitive Type: যেই variable গুলা multiple value রাখতে পারে সেটি হছে Non-Primitive Type .
const ages = [45, 65, 48];
const student = {id: 23, class: 7};

let p = {job: 'web developer'}
let q = p; // এখানে q কেও p যেখানে create হয়েছে সেই memory address কেই reffer করতেছে ।
q = {job: "Web Designer}; কিন্তু এখানে q কে reassign করার পর q নতুন আরেকটা memory address কে reffer করতেছে
q.job = 'front end developer'; // কিন্তু এখানে আবার p এর memory  address কেই reffer করে কিন্তু reassign করলে নতুন আরেক memory address কে reffer করে
console.log(p, q);


32 -->
আমরা যদি কোনো একটা variable এর value নাই এইটা set করতে যাই তাহলে বলবে যে null not undefined.
ex: const num = null ;
not 
const num = undefined;

/* 
 8 ways to get Undefine
1. variable that is not initialized will give undefined
2. function with no return 
3. parameter that is not passed will be undefined
4. if return has nothing on the right side will return undefined
5. property that doesn't exists on an object will give you undefined
6. accessing array elements outside of the index range 
7. deleting an element inside an array
8. set a value directly to undefined
*/


32_3 -->


/* 
Truthy:
1. true
2. any number (+ve, -ve) will be truthy other than 0
3. any string other than empty string
4. '0', 'false'
5. {}
6. []


Falsy:
1. false
2. 0
3. '' (empty string)
4. undefined
5. null
*/

const x = false;
if(x) এখানে x , true ই হয়  by default
তাই if(!x) মানে false যা condition এর সাথে match করতাছে so condition is true 
কিন্তু y = true;
if(!!y) এখানে y, true... কারণ  !!(y = true) === !(false) === true


32_4 -->

Here when we compare two array or two objcets they compare their reference number not value or type.

== equal দিয়ে check করার সময় value গুলা কে type coersion(conversion) করে



32_5 -->
global scope and block scope.

var variable অর function কে hoisting or (উপরে উঠাইয়া ফেলে)
কিন্তু function expression variable কে hoisting করে কিন্তু anonymus function কে hoisting করে নাহ। তাই ওই variable এর value হয়ে যায় undefined আর undefined কে function হিসেবে use করা যায় নাহ।


32_6 --> 

একটা function এর ভিতর থেকে যখন আরেকটা 
function revoke করা হয় তখন ঐ ভিতরের function টা একটা closure create করে । 


32_7 --> function কে argument হিসেবে pass করলে তারপর ঐ function argument কে function এর ভিতর থেকে call করলে তাকে বলা হয় call back function ।

function calculator(a, b, operation){
    return operation(a, b);
}
const add = (a, b) => a + b;
console.log(calculator(5, 7, add));



32_8 --> 

When we pass an argument of primitive type it passes a copy of the value but 
when we pass an argument of non-primitive type it passes a reference rathen a value . so if we change the value of reference argument it also cahnge the value from actual non-primitive variable.

argument is a array like object


*আমরা যখন চাই যে, ফাংশনের কাজ আসল ডাটা পরিবর্তন করবে না, তখন পাস বাই ভ্যালু ব্যবহার করুন ।

*আমরা যখন চাই যে, ফাংশনের পরিবর্তন আসল অব্জেক্টে প্রতিফলিত করতে তখন পাস বাই রেফারেন্স ব্যাবহার করবো ।


32_9 -->

1. Debug(Some notes in the video)
2. Money_master folder

ctrl + f দিলে শুধু একটা ফাইলে খুজবে কিন্তু ctrl + shift + f দিলে যতো ফাইলে আছে সব ফাইলে খুজবে

ctrl + o দিয়া একটা জিনিস খোজা যায় console এর ভিতরে
